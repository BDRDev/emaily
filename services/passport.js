
//for authentication
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');

const keys = require('../config/keys');

//trying to fetch something from mongoose
const User = mongoose.model('users');

//pass user model, what we got from the db; creates a cookie
passport.serializeUser((user, done) => {
	//this generates the cookie I think

	//parameters - error object, identifying piece of information
	//user.id is the id generated by MongoDB
	done(null, user.id);
});

//cookie then done function
passport.deserializeUser((id, done) => {
	//search over all users to find the one with the specific id
	User.findById(id)
		.then(user => {
			//pass the error object and the user we just got out
			done(null, user);
		})
})


//this lets passport know about the Google Strategy
passport.use(
	new GoogleStrategy({
		clientID: keys.googleClientID,
		clientSecret: keys.googleClientSecret,
		callbackURL: '/auth/google/callback',
		proxy: true
	}, 
	async (accessToken, refreshToken, profile, done) => {
		//checks to see if there is a user with the same googleId of the one we just got back
		const existingUser = await User.findOne({ googleId: profile.id });
			
		//if you return from the if, you do not need the else
		if(existingUser){
			console.log(existingUser)
			//pass error objects as well as the users
			return done(null, existingUser);
		}

		//instance of a user
		const user = await new User({ googleId: profile.id }).save()
		done(null, user);
		
			
	})
);